Import Packages
---------------

.. code:: ipython3

    import os
    import rdkit.Chem as Chem
    import rdkit.Chem.AllChem as AllChem
    from rdkit.Chem import PandasTools
    import rdkit.Chem.Fragments as Fragments
    
    import random
    import numpy as np
    import matplotlib.pyplot as plt
    
    import sys
    curr_dir = os.path.abspath(".")
    util_dir = os.path.join(os.path.dirname(curr_dir))
    sys.path.append(util_dir)
    from utils.kmeans import KMeans


::


    ---------------------------------------------------------------------------

    ModuleNotFoundError                       Traceback (most recent call last)

    Cell In[6], line 18
         16 util_dir = os.path.join(os.path.dirname(curr_dir))
         17 sys.path.append(util_dir)
    ---> 18 from utils.kmeans import KMeans


    ModuleNotFoundError: No module named 'utils.kmeans'


Curate Dataset
--------------

.. code:: ipython3

    infile = "../data/combined_training_datasets_unique.sdf"
    name = os.path.splitext(os.path.basename(infile))[0]
    
    all_df = PandasTools.LoadSDF(infile)
    all_df.head()


.. parsed-literal::

    [10:37:15] Warning: ambiguous stereochemistry - overlapping neighbors  - at atom 13 ignored




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>pKa</th>
          <th>marvin_pKa</th>
          <th>marvin_atom</th>
          <th>marvin_pKa_type</th>
          <th>original_dataset</th>
          <th>ID</th>
          <th>ROMol</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>6.21</td>
          <td>6.09</td>
          <td>10</td>
          <td>basic</td>
          <td>['chembl25']</td>
          <td>1702768</td>
          <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8259d81690&gt;</td>
        </tr>
        <tr>
          <th>1</th>
          <td>7.46</td>
          <td>8.2</td>
          <td>9</td>
          <td>basic</td>
          <td>['chembl25']</td>
          <td>273537</td>
          <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8259d820a0&gt;</td>
        </tr>
        <tr>
          <th>2</th>
          <td>4.2</td>
          <td>3.94</td>
          <td>9</td>
          <td>basic</td>
          <td>['datawarrior']</td>
          <td>7175</td>
          <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8259d82110&gt;</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3.73</td>
          <td>5.91</td>
          <td>8</td>
          <td>acidic</td>
          <td>['datawarrior']</td>
          <td>998</td>
          <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8259d82180&gt;</td>
        </tr>
        <tr>
          <th>4</th>
          <td>11.0</td>
          <td>8.94</td>
          <td>13</td>
          <td>basic</td>
          <td>['chembl25']</td>
          <td>560562</td>
          <td>&lt;rdkit.Chem.rdchem.Mol object at 0x7f8259d821f0&gt;</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    patterns = []
    for patstr in dir(Chem.Fragments):
        if patstr.startswith("fr"):
            patterns.append(patstr)
    print(f"Number of fragment patterns: {len(patterns)}")
    
    PATTERNS = [getattr(Fragments, patstr) for patstr in patterns]
    
    def featurize(mol):
        counts = [pattern(mol) for pattern in PATTERNS]
        return counts
    
    X = []
    Y = []
    
    for idx, row in all_df.iterrows():
        x = featurize(row["ROMol"])
        X.append(x)
        Y.append(row["pKa"])
    X = np.array(X, dtype=float)
    Y = np.array(Y, dtype=float).reshape(-1, 1)
    Y = np.where(Y<7, 1, 0)


.. parsed-literal::

    Number of fragment patterns: 85


Hyperparameters
---------------

.. code:: ipython3

    # for reproduce purposes
    SEED = 0
    random.seed(SEED)
    np.random.seed(SEED)
    torch.manual_seed(SEED)
    
    datadir = "."
    ratio = 0.1
    device = "cuda" if torch.cuda.is_available() else "cpu"
    
    nsamples = X.shape[0]
    ndim = X.shape[1]

Split dataset
-------------

.. code:: ipython3

    def random_split(X, Y, ratio):
        nsamples = X.shape[0]
        val_size = int(nsamples*ratio)
        val_indices = np.random.choice(nsamples, val_size, replace=False)
        train_indices = set(range(nsamples)) - set(val_indices.tolist())
        train_indices = list(train_indices)
        X_train, Y_train = X[train_indices], Y[train_indices]
        X_test, Y_test = X[val_indices], Y[val_indices]
        return (X_train, Y_train), (X_test, Y_test)

Model
-----


Training
--------


Analysis
--------

